name: CD

on:
  push:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.DEV_ECR_REGISTRY }}
          ECR_REPOSITORY: v2_selleraxis-dev
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . \
            --build-arg ENV="dev" \
            --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --build-arg DB_NAME=${{ secrets.DB_NAME }} \
            --build-arg DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} \
            --build-arg CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }} \
            --build-arg HOST=${{ secrets.HOST }} \
            --build-arg BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
            --build-arg SENDER_EMAIL=${{ secrets.SENDER_EMAIL }} \
            --build-arg UPDATE_INVENTORY_SQS_NAME=${{ secrets.UPDATE_INVENTORY_SQS_NAME}} \
            --build-arg UPDATE_RETAILER_INVENTORY_SQS_NAME=${{ secrets.UPDATE_RETAILER_INVENTORY_SQS_NAME }} \
            --build-arg WEBSITE_URL=${{ secrets.WEBSITE_URL }} \
            --build-arg QBO_CLIENT_ID = {{ secrets.QBO_CLIENT_ID}} \
            --build-arg QBO_TOKEN_ENDPOINT = {{ secrets.QBO_TOKEN_ENDPOINT }} \
            --build-arg QBO_CLIENT_SECRET = {{ secrets.QBO_CLIENT_SECRET }} \
            --build-arg QBO_ENVIRONMENT = {{ secrets.QBO_ENVIRONMENT}} \
            --build-arg QBO_QUICKBOOK_URL = {{ secrets.QBO_QUICKBOOK_URL }} \
            --build-arg QBO_REDIRECT_URL = {{ secrets.QBO_REDIRECT_URL }} \
            --build-arg DEFAULT_FEDEX_CLIENT_ID=${{ secrets.DEFAULT_FEDEX_CLIENT_ID }} \
            --build-arg DEFAULT_FEDEX_CLIENT_SECRET=${{ secrets.DEFAULT_FEDEX_CLIENT_SECRET }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cicd/deploy/aws-ecs/task-definition-dev.json
          container-name: v2_backend-api-container-dev
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: v2_selleraxis-api-service-dev
          cluster: v2_selleraxis-backend-dev
