# Generated by Django 3.2.14 on 2023-11-07 04:45

from django.db import migrations

from selleraxis.retailer_purchase_orders.models import QueueStatus


def recheck_order_status(apps, schema_editor):
    # get all order
    RetailerPurchaseOrder = apps.get_model(
        "retailer_purchase_orders", "RetailerPurchaseOrder"
    )
    list_order = RetailerPurchaseOrder.objects.all()

    # get all order item
    RetailerPurchaseOrderItem = apps.get_model(
        "retailer_purchase_order_items", "RetailerPurchaseOrderItem"
    )
    list_order_item = RetailerPurchaseOrderItem.objects.all()

    # get all order item package
    OrderItemPackage = apps.get_model("order_item_package", "OrderItemPackage")
    list_order_item_package = OrderItemPackage.objects.all()

    # get all order package
    OrderPackage = apps.get_model("order_package", "OrderPackage")
    list_order_package = OrderPackage.objects.all()

    # get all order history
    RetailerPurchaseOrderHistory = apps.get_model(
        "retailer_purchase_order_histories", "RetailerPurchaseOrderHistory"
    )
    list_order_history = RetailerPurchaseOrderHistory.objects.all()

    # get all invoice
    Invoice = apps.get_model("invoice", "Invoice")
    list_invoice = Invoice.objects.all()

    # get all shipment
    Shipment = apps.get_model("shipments", "Shipment")
    list_shipment = Shipment.objects.all()
    list_package_id_shipped = []
    for shipment_item in list_shipment:
        if shipment_item.package is not None:
            list_package_id_shipped.append(shipment_item.package.id)

    for order in list_order:
        is_partly_ship = False
        check_full_shipped = True

        # get list item of this order
        list_order_item_for_order = list_order_item.filter(order__id=order.id)
        # get list package shipped of order
        list_package_shipped_for_order = list_order_package.filter(
            order__id=order.id, id__in=list_package_id_shipped
        )
        # get list order history of order
        list_order_history_for_order = list_order_history.filter(order__id=order.id)
        # get list status history from history
        status_history = [
            order_history.status.upper()
            for order_history in list_order_history_for_order
        ]
        # if order not have package shipped, it only status Opened or Acknowledged
        if len(list_package_shipped_for_order) <= 0:
            if order.status not in [
                QueueStatus.Opened.value,
                QueueStatus.Acknowledged.value,
            ]:
                order.status = QueueStatus.Opened.value
                if QueueStatus.Acknowledged.value.upper() in status_history:
                    order.status = QueueStatus.Acknowledged.value

        # if list item of this order is not None
        if len(list_order_item_for_order) > 0:
            # get list package id shipped of this order
            list_package_id_shipped_for_order = [
                package_shipped.id for package_shipped in list_package_shipped_for_order
            ]
            # get list package id is not None
            if len(list_package_id_shipped_for_order) > 0:
                # if order has package shipped, it is status partly shipped
                is_partly_ship = True
                # get list item package shipped and check qty is equal qty order or not
                list_order_item_package_shipped = list_order_item_package.filter(
                    package__id__in=list_package_id_shipped_for_order
                )
                for order_item in list_order_item_for_order:
                    check_qty = 0
                    for order_item_package in list_order_item_package_shipped:
                        if order_item.id == order_item_package.order_item.id:
                            check_qty += order_item_package.quantity
                    if check_qty != order_item.qty_ordered:
                        check_full_shipped = False
                        break
        if is_partly_ship is True:
            # if order is full shipped
            if check_full_shipped is True:
                # order full shipped will have status is shipped, shipment confirm or invoiced
                order.status = QueueStatus.Shipped.value
                # create order history shipped if missing
                if QueueStatus.Shipped.value.upper() not in status_history:
                    new_history = RetailerPurchaseOrderHistory(
                        status=QueueStatus.Shipped.value, order=order
                    )
                    new_history.save()
                # if order history has status shipment confirm, update order status to shipment confirm
                if QueueStatus.Shipment_Confirmed.value.upper() in status_history:
                    order.status = QueueStatus.Shipment_Confirmed.value
                # check order invoiced or not
                invoice_for_order = (
                    list_invoice.filter(order__id=order.id)
                    .order_by("-created_at")
                    .first()
                )
                if invoice_for_order is not None:
                    # if invoice has doc number, order is invoiced
                    if invoice_for_order.doc_number is not None:
                        order.status = QueueStatus.Invoiced.value
                        # create order history invoiced if missing
                        if QueueStatus.Invoiced.value.upper() not in status_history:
                            new_history = RetailerPurchaseOrderHistory(
                                status=QueueStatus.Invoiced.value, order=order
                            )
                            new_history.save()
                        # if order history has status invoice confirm, update order status to invoice confirm
                        if (
                            QueueStatus.Invoice_Confirmed.value.upper()
                            in status_history
                        ):
                            order.status = QueueStatus.Invoice_Confirmed.value
            # if order is partly ship
            else:
                # order partly shipped will have status is partly shipped or partly shipped confirm
                order.status = QueueStatus.Partly_Shipped.value
                # create order history partly shipped if missing
                if QueueStatus.Partly_Shipped.value.upper() not in status_history:
                    new_history = RetailerPurchaseOrderHistory(
                        status=QueueStatus.Shipped.value, order=order
                    )
                    new_history.save()
                # if order history has status partly shipped confirm, update order status to partly shipped confirm
                if QueueStatus.Partly_Shipped_Confirmed.value.upper() in status_history:
                    order.status = QueueStatus.Partly_Shipped_Confirmed.value
        order.save()


class Migration(migrations.Migration):
    dependencies = [
        ("retailer_purchase_orders", "0023_retailerpurchaseorder_warehouse"),
    ]

    operations = [
        migrations.RunPython(recheck_order_status),
    ]
