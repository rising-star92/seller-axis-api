# Generated by Django 3.2.14 on 2023-11-07 04:45

from django.db import migrations

from selleraxis.retailer_purchase_orders.models import QueueStatus
from selleraxis.shipments.models import ShipmentStatus


def recheck_order_status(apps, schema_editor):
    # get all order
    RetailerPurchaseOrder = apps.get_model(
        "retailer_purchase_orders", "RetailerPurchaseOrder"
    )
    list_order = RetailerPurchaseOrder.objects.all()

    # get all order history
    RetailerPurchaseOrderHistory = apps.get_model(
        "retailer_purchase_order_histories", "RetailerPurchaseOrderHistory"
    )
    list_order_history = RetailerPurchaseOrderHistory.objects.all()

    # get all shipment
    Shipment = apps.get_model("shipments", "Shipment")
    list_shipment = Shipment.objects.all()
    list_package_id_shipped = []
    for shipment_item in list_shipment:
        if shipment_item.package is not None:
            list_package_id_shipped.append(shipment_item.package.id)

    for order in list_order:
        list_order_history_for_order = list_order_history.filter(
            order__id=order.id
        ).order_by("-created_at")

        list_order_item = order.items.all()
        list_order_package = order.order_packages.all().prefetch_related(
            "order_item_packages", "shipment_packages"
        )
        list_order_package_shipped = list_order_package.filter(
            shipment_packages__status__in=[
                ShipmentStatus.CREATED,
                ShipmentStatus.SUBMITTED,
            ]
        )
        is_fulfill = True
        for order_item in list_order_item:
            check_qty = 0
            for order_package in list_order_package_shipped:
                # check package is shipped or not
                is_shipped = False
                for shipment_package in order_package.shipment_packages.all():
                    if shipment_package.status in [
                        ShipmentStatus.CREATED,
                        ShipmentStatus.SUBMITTED,
                    ]:
                        is_shipped = True
                        break
                if is_shipped:
                    for order_item_package in order_package.order_item_packages.all():
                        if order_item.id == order_item_package.order_item.id:
                            check_qty += order_item_package.quantity
            # if one item not shipped all, order not shipped all
            if check_qty != order_item.qty_ordered:
                is_fulfill = False
                break
        # if not ship all
        if not is_fulfill:
            if order.status in [
                QueueStatus.Shipment_Confirmed.value,
                QueueStatus.Partly_Shipped_Confirmed.value,
            ]:
                # if not ship all, current order status Shipment_Confirmed is wrong, it must be Partly_Shipped_Confirmed
                order.status = QueueStatus.Partly_Shipped_Confirmed.value
                order.save()
                # update history form Shipment_Confirmed to Partly_Shipped_Confirmed
                list_order_history_for_order.filter(
                    status=QueueStatus.Shipment_Confirmed.value
                ).update(status=QueueStatus.Partly_Shipped_Confirmed.value)
            elif order.status in [QueueStatus.Shipped.value]:
                # if not ship all, current order status Shipped is wrong, it must be Partly_Shipped
                order.status = QueueStatus.Partly_Shipped_Confirmed.value
                order.save()
                # update history form Shipped to Partly_Shipped
                list_order_history_for_order.filter(
                    status=QueueStatus.Shipment_Confirmed.value
                ).update(status=QueueStatus.Partly_Shipped_Confirmed.value)
        # if ship all
        else:
            if order.status in [
                QueueStatus.Shipment_Confirmed.value,
                QueueStatus.Partly_Shipped_Confirmed.value,
            ]:
                # if ship all, current order status Partly_Shipped_Confirmed is wrong, it must be Shipment_Confirmed
                order.status = QueueStatus.Shipment_Confirmed.value
                order.save()
                # find Shipment_Confirmed history
                shipment_confirmed_history = list_order_history_for_order.filter(
                    status=QueueStatus.Shipment_Confirmed.value
                ).first()
                # if Shipment_Confirmed history not found, create it
                if shipment_confirmed_history is None:
                    new_history = RetailerPurchaseOrderHistory(
                        status=QueueStatus.Shipment_Confirmed.value, order=order
                    )
                    new_history.save()
            elif order.status in [QueueStatus.Partly_Shipped.value]:
                # if ship all, current order status Partly_Shipped is wrong, it must be Shipped
                order.status = QueueStatus.Shipped.value
                order.save()
                # find Shipped history
                shipped_history = list_order_history_for_order.filter(
                    status=QueueStatus.Shipped.value
                ).first()
                # if Shipped history not found, create it
                if shipped_history is None:
                    new_history = RetailerPurchaseOrderHistory(
                        status=QueueStatus.Shipped.value, order=order
                    )
                    new_history.save()


class Migration(migrations.Migration):
    dependencies = [
        ("retailer_purchase_orders", "0026_retailerpurchaseorder_ship_times"),
    ]

    operations = [
        migrations.RunPython(recheck_order_status),
    ]
