# Generated by Django 3.2.14 on 2023-11-07 04:45

from django.db import migrations

from selleraxis.retailer_purchase_orders.models import QueueStatus
from selleraxis.shipments.models import ShipmentStatus


def recheck_qty(apps, schema_editor):
    # get all order
    RetailerPurchaseOrder = apps.get_model(
        "retailer_purchase_orders", "RetailerPurchaseOrder"
    )
    list_order = RetailerPurchaseOrder.objects.all().prefetch_related(
        "items", "order_packages", "order_history"
    )

    # get all product alias
    ProductAlias = apps.get_model("product_alias", "ProductAlias")
    list_product_alias = ProductAlias.objects.all().prefetch_related(
        "retailer", "product"
    )

    # get all product
    list_product = [product_alias.product for product_alias in list_product_alias]
    # set product qty on hand = 100 and pending = 0
    for product in list_product:
        product.qty_on_hand = 100
        product.qty_pending = 0
        product.save()

    for order in list_order:
        list_order_item = order.items.all()
        for order_item in list_order_item:
            # find product alias
            valid_alias = None
            for product_alias in list_product_alias:
                if (
                    order_item.merchant_sku == product_alias.merchant_sku
                    and order_item.order.batch.retailer.id == product_alias.retailer.id
                ):
                    valid_alias = product_alias
                    break
            # update qty pending if alias valid
            if valid_alias is not None:
                calculated_qty_pending = int(valid_alias.sku_quantity) * int(
                    order_item.qty_ordered
                )
                for product in list_product:
                    if product.id == valid_alias.product.id:
                        if order.status != QueueStatus.Cancelled.value:
                            qty_on_hand = product.qty_on_hand
                            product.qty_on_hand = qty_on_hand - calculated_qty_pending
                            product.save()

                            # check shipped qty
                            shipped_order_packages = (
                                order.order_packages.all()
                                .prefetch_related(
                                    "order_item_packages", "shipment_packages"
                                )
                                .filter(
                                    shipment_packages__status__in=[
                                        ShipmentStatus.CREATED,
                                        ShipmentStatus.SUBMITTED,
                                    ]
                                )
                            )
                            for order_package in shipped_order_packages:
                                for (
                                    order_item_package
                                ) in order_package.order_item_packages.all():
                                    if (
                                        order_item.id
                                        == order_item_package.order_item.id
                                    ):
                                        calculated_qty_pending = (
                                            calculated_qty_pending
                                            - order_item_package.quantity
                                            * valid_alias.sku_quantity
                                        )
                            qty_pending = product.qty_pending
                            product.qty_pending = qty_pending + abs(
                                calculated_qty_pending
                            )
                            product.save()


class Migration(migrations.Migration):
    dependencies = [
        ("retailer_purchase_orders", "0027_update_status_for_order_3"),
    ]

    operations = [
        migrations.RunPython(recheck_qty),
    ]
