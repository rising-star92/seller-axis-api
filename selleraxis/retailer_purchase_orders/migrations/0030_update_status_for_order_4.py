# Generated by Django 3.2.14 on 2023-11-07 04:45

from django.db import migrations

from selleraxis.retailer_purchase_orders.models import QueueStatus
from selleraxis.shipments.models import ShipmentStatus


def recheck_order_status(apps, schema_editor):
    # get all order
    RetailerPurchaseOrder = apps.get_model(
        "retailer_purchase_orders", "RetailerPurchaseOrder"
    )
    list_order = RetailerPurchaseOrder.objects.all()

    # get all order item
    RetailerPurchaseOrderItem = apps.get_model(
        "retailer_purchase_order_items", "RetailerPurchaseOrderItem"
    )
    list_order_item = RetailerPurchaseOrderItem.objects.all()

    # get all order item package
    OrderItemPackage = apps.get_model("order_item_package", "OrderItemPackage")
    list_order_item_package = OrderItemPackage.objects.all()

    # get all order package
    OrderPackage = apps.get_model("order_package", "OrderPackage")
    list_order_package = OrderPackage.objects.all()

    # get all order history
    RetailerPurchaseOrderHistory = apps.get_model(
        "retailer_purchase_order_histories", "RetailerPurchaseOrderHistory"
    )
    list_order_history = RetailerPurchaseOrderHistory.objects.all()

    # get all invoice
    Invoice = apps.get_model("invoice", "Invoice")
    list_invoice = Invoice.objects.all()

    # get all shipment
    Shipment = apps.get_model("shipments", "Shipment")
    list_shipment = Shipment.objects.all().filter(
        status__in=[
            ShipmentStatus.CREATED,
            ShipmentStatus.SUBMITTED,
        ]
    )
    list_package_id_shipped = []
    for shipment_item in list_shipment:
        if shipment_item.package is not None:
            list_package_id_shipped.append(shipment_item.package.id)

    for order in list_order:
        is_partly_ship = False
        check_full_shipped = True

        # get list item of this order
        list_order_item_for_order = list_order_item.filter(order__id=order.id)
        # get list package shipped of order
        list_package_shipped_for_order = list_order_package.filter(
            order__id=order.id, id__in=list_package_id_shipped
        )
        # get list order history of order
        list_order_history_for_order = list_order_history.filter(order__id=order.id)
        # get list status history from history
        status_history = [
            order_history.status.upper()
            for order_history in list_order_history_for_order
        ]
        # if order cancelled
        if order.status == QueueStatus.Acknowledged.value:
            if (
                QueueStatus.Shipment_Confirmed.value.upper() in status_history
                or QueueStatus.Partly_Shipped_Confirmed.value.upper() in status_history
            ):
                # if list item of this order is not None
                if len(list_order_item_for_order) > 0:
                    # get list package id shipped of this order
                    list_package_id_shipped_for_order = [
                        package_shipped.id
                        for package_shipped in list_package_shipped_for_order
                    ]
                    # get list package id is not None
                    if len(list_package_id_shipped_for_order) > 0:
                        # if order has package shipped, it is status partly shipped
                        is_partly_ship = True
                        # get list item package shipped and check qty is equal qty order or not
                        list_order_item_package_shipped = (
                            list_order_item_package.filter(
                                package__id__in=list_package_id_shipped_for_order
                            )
                        )
                        for order_item in list_order_item_for_order:
                            check_qty = 0
                            for order_item_package in list_order_item_package_shipped:
                                if order_item.id == order_item_package.order_item.id:
                                    check_qty += order_item_package.quantity
                            if check_qty != order_item.qty_ordered:
                                check_full_shipped = False
                                break
                if is_partly_ship is True:
                    # if order is full shipped
                    if check_full_shipped is True:
                        order.status = QueueStatus.Shipment_Confirmed.value
                    else:
                        order.status = QueueStatus.Partly_Shipped_Confirmed.value

        order.save()


class Migration(migrations.Migration):
    dependencies = [
        ("retailer_purchase_orders", "0029_alter_retailerpurchaseorder_status"),
    ]

    operations = [
        migrations.RunPython(recheck_order_status),
    ]
